// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4786.RobotBuilderTest1.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4786.RobotBuilderTest1.Robot;
import org.usfirst.frc4786.RobotBuilderTest1.RobotMap;
import org.usfirst.frc4786.RobotBuilderTest1.subsystems.DriveTrain;

import com.ctre.phoenix.motorcontrol.ControlMode;

import org.usfirst.frc4786.RobotBuilderTest1.OI;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.GenericHID.Hand;
/**
 *
 */
public class OpenLoopDrive extends Command {

    public OpenLoopDrive() {

        requires(Robot.driveTrain);

    }

    @Override
    protected void initialize() {
    }

    @Override
    protected void execute() {
 
    	//for joy sticks
 //   	Robot .driveTrain.takeJoystickInputs(Robot.oi.getLeftJoystick() , Robot.oi.getRightJoystick());

    	// for xbox controller     
//    	double rightStickValue = Robot.oi.getXbox1().getY(GenericHID.Hand.kRight);   	
//    	double leftStickValue = Robot.oi.getXbox1().getY(GenericHID.Hand.kLeft);
//    	//System.out.println(-leftStickValue);
//    	Robot.driveTrain.takeStickInputValues( - leftStickValue , - rightStickValue);
    	
    	
    	double forwardValue = Robot.oi.getXbox1().getTriggerAxis(GenericHID.Hand.kRight) * 0.75;   	
    	double reverseValue = Robot.oi.getXbox1().getTriggerAxis(GenericHID.Hand.kLeft) * 0.75;
    	double turnAmount = Robot.oi.getXbox1().getX(GenericHID.Hand.kLeft);
    	
    	//Calculate an Arcade drive speed by taking forward speed and subtracting it by reverse speed
    	//So Cool! :D
    	double robotOutput = forwardValue - reverseValue;
    	
    	Robot.driveTrain.ArcadeDrive(robotOutput, turnAmount);
    	
     }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
