// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4786.RobotBuilderTest1;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4786.RobotBuilderTest1.commands.*;
import org.usfirst.frc4786.RobotBuilderTest1.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    Command disabledCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
    
	public static DriverStation.Alliance alliance;
	public static String allianceColorVal = "";

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static AutoChooser autoChooser;
    public static ArduinoInterface arduinoLCDInterface;
//    public static ArduinoInterface arduinoLEDInterface;
//    public static ArduinoInterface arduinoCameraInterface;
    public static Proximity proximitySensor;
    
    public static RobotMap.AutoPlay myPlay = RobotMap.AutoPlay.ONE;
	public static RobotMap.AutoPosition myPosition = RobotMap.AutoPosition.A;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();

        driveTrain = new DriveTrain();
        autoChooser =  new AutoChooser();
        arduinoLCDInterface = new ArduinoInterface(8);
        //arduinoLEDInterface = new ArduinoInterface(7);
        //arduinoCameraInterface = new ArduinoInterface(6);
        
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit() {
    	disabledCommand = new DisplayAutonomous();
    	disabledCommand.setRunWhenDisabled(true);
    }

    @Override
    public void disabledPeriodic() {
    	disabledCommand.start();
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
    	/* Once we have a working 2nd Arduino + LED System
    	//send correct alliance data to arduino
		alliance = DriverStation.getInstance().getAlliance();
    	
    	if(alliance.toString().equalsIgnoreCase("blue")){
    		allianceColorVal = "bluelight";
    		arduinoLEDInterface.writeStringData(allianceColorVal);
   		}else if(alliance.toString().equalsIgnoreCase("red")){
   			allianceColorVal = "redlight";
   			arduinoLEDInterface.writeStringData(allianceColorVal);
    	}else{
    		allianceColorVal = "purplelight";
    		arduinoLEDInterface.writeStringData(allianceColorVal);
    	}
    	SmartDashboard.putString("Alliance", allianceColorVal);
    	*/
        
        driveTrain.robotDrive.setSafetyEnabled(true);
        driveTrain.robotDrive.setExpiration(1);
        driveTrain.robotDrive.setMaxOutput(1.0);
        
        if (disabledCommand != null) disabledCommand.cancel();
        autoChooser.autonomousMode();
        
        switch (myPlay) {
        	case ONE:
        		autonomousCommand = new StopAtMetersFromSurface(3, 0.25);
        	case TWO:
        		autonomousCommand = new Play2();
        	case THREE:
        		autonomousCommand = new Play3();
        	case FOUR:
        		autonomousCommand = new Play4();
        	case FIVE:
        		autonomousCommand = new Play5();
        	case SIX:
        		autonomousCommand = new Play6();
        	default:
        		autonomousCommand = new AutoLine();
        }
		
        if (autonomousCommand != null) autonomousCommand.start();
		
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        SmartDashboard.putNumber("Distance (Meters)", Robot.proximitySensor.getDistance());
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        if (disabledCommand != null) disabledCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
    
    @Override
    public void testInit() {
		//Robot.arduinoLEDInterface.writeStringData("rainbowlight");
    }
}
