// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4786.RobotBuilderTest1;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.interfaces.Potentiometer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4786.RobotBuilderTest1.commands.*;
import org.usfirst.frc4786.RobotBuilderTest1.subsystems.*;
import org.usfirst.frc4786.RobotBuilderTest1.RobotMap.*;
import org.usfirst.frc4786.RobotBuilderTest1.commands.SwitchFront;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    
    
  
    @SuppressWarnings("deprecation")
	// We are using the old network tables code because it makes a lot more sense! (so deprecation warnings are OK!)
    NetworkTable myTable; // starts myTable (We think that you have to put this and make a table to access the data in all of the different places that you want the data to be used in (same for the myTable = one!))
	// myTable is the table you use to put the data from the GRIP Contours Report into
    
    
    @SuppressWarnings("deprecation")
	@Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
   /*     
        Potentiometer pot = new AnalogPotentiometer(0, 360, 30);
        double degrees = pot.get();
        SmartDashboard.putNumber("Potentiometer", degrees);
        System.out.print(degrees);
        System.out.println("Potentiometer Degrees:");
        
        DigitalInput autoButton = new DigitalInput(1);
        boolean buttonPressed = autoButton.get();
*/
        
        // Using old deprecated code on purpose - it still works!
         myTable = NetworkTable.getTable("GRIP/myContoursReport"); // makes the table myTable properly what it should be
		 NetworkTable.setUpdateRate(0.05);
		 myTable.putNumber("hsvHueMin", 31);
		 myTable.putNumber("hsvHueMax", 69);
		 myTable.putNumber("hsvSatMin", 71);
		 myTable.putNumber("hsvSatMax", 182);
		 myTable.putNumber("hsvValMin", 102);
		 myTable.putNumber("hsvValMax", 255);
		 myTable.putNumber("contourAreaMin", 1000);
		 
		 myTable.putNumber("solidityMin", 77);
		 myTable.putNumber("solidityMax", 100);
		 myTable.putNumber("ratioMin", 0);
		 myTable.putNumber("ratioMax", 4);
		
		 myTable.setPersistent("hsvHueMin");
		 myTable.setPersistent("hsvHueMax");
		 myTable.setPersistent("hsvSatMin");
		 myTable.setPersistent("hsvSatMax");
		 myTable.setPersistent("hsvValMin");
		 myTable.setPersistent("hsvValMax");
		 myTable.setPersistent("contourAreaMin");
		

		 myTable.setPersistent("solidityMin");
		 myTable.setPersistent("solidityMax");
		 myTable.setPersistent("ratioMin");
		 myTable.setPersistent("ratioMax");
        
        chooser.addDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }
    
    
    @Override
	public void testInit(){
    	//This will override the persistent values!!! Be careful!
    	 new VisionNTableValueSet(); // sets new values for the first time
	}
    
    @Override
	public void testPeriodic() {
    	//This will override the persistent values!!! Be careful!
    	 new VisionNTableValueSet(); // sets new values for the first time
    }
    
    

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}
