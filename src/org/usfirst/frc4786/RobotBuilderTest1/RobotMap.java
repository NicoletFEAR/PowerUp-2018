// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4786.RobotBuilderTest1;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.interfaces.Gyro;
import edu.wpi.first.wpilibj.interfaces.Potentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.I2C.Port;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.Timer;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    public static WPI_TalonSRX frontLeft;
    public static WPI_TalonSRX frontRight;
    public static WPI_TalonSRX midLeft;
    public static WPI_TalonSRX midRight;
    public static WPI_TalonSRX backLeft;
    public static WPI_TalonSRX backRight;
    
    public static DifferentialDrive robotDrive;
	public static final int aForwardChannel = 0;
	public static final int aReverseChannel = 1;
//	public static final int bForwardChannel = 2;
//	public static final int bReverseChannel = 3;
	public static final int compressormodule = 0;
	
	public static AnalogPotentiometer playKnob;
	public static AnalogPotentiometer positionKnob;
	public static AHRS navX;
	public static PIDController turnController;

	//PID Constants
	public static final int ALLOWABLE_ERROR_CONSTANT_LEFT = 0;
	public static final int ALLOWABLE_ERROR_CONSTANT_RIGHT = 0;
	public static final int ALLOWABLE_TURN_ERROR = 1; //In degrees
	public static final double WHEEL_RADIUS = 0.2604; //Feet
	public static final double WHEEL_SEPARATION = 0.416; //Feet
	public static final double fudgeFactor = 0.0;
	public static final int PIDSLOT = 0;
	public static final double CLOSED_LOOP_RAMP_RATE = 0.015625;
	public static final int IZONE = 0;
	
	//NavX turn PID Constants
/*	public static final double TurnP = 0.025;
	public static final double TurnI = 0.006;
	public static final double TurnD = 0.04;
	public static final double TurnF = 0.0; */
	public static final double TurnP = 0.0;
	public static final double TurnI = 0.0;
	public static final double TurnD = 0.0;
	public static final double TurnF = 0.0;
	
	//Left PIDF
	public static final double LeftP = 0.0001;
	public static final double LeftI = 0.0;
	public static final double LeftD = 0.0;
	public static final double LeftF = 0.0;
	//Right PIDF
	public static final double RightP = 0.0001;
	public static final double RightI = 0.0;
	public static final double RightD = 0.0;
	public static final double RightF = 0.0;
	
	Gyro gyro;
	
	public enum AutoPosition {
    	A, B, C, D, E
    }
    public enum AutoPlay {
    	ONE, TWO, THREE, FOUR, FIVE, SIX
    }

    public static void init() {
        frontLeft = new WPI_TalonSRX(13);
        frontRight = new WPI_TalonSRX(14);
        midLeft = new WPI_TalonSRX(15);
        midRight = new WPI_TalonSRX(16);
        backLeft = new WPI_TalonSRX(17);
        backRight = new WPI_TalonSRX(18);
        
        positionKnob = new AnalogPotentiometer(1, 5);
        playKnob = new AnalogPotentiometer(2, 6);
        navX = new AHRS(Port.kMXP);
    }
}
